// Code generated by protoc-gen-go. DO NOT EDIT.
// source: message.proto

/*
Package message is a generated protocol buffer package.

It is generated from these files:
	message.proto

It has these top-level messages:
	ProtoMessage
	LoginRequest
	LoginReply
	MatchRequest
	CardInfo
	PlayCardInfo
	MatchReply
	UserBriefInfo
	UserInfo
*/
package message

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type REQUEST_TYPE int32

const (
	REQUEST_TYPE_No_Request REQUEST_TYPE = 0
	REQUEST_TYPE_Login      REQUEST_TYPE = 1
	REQUEST_TYPE_Match      REQUEST_TYPE = 2
)

var REQUEST_TYPE_name = map[int32]string{
	0: "No_Request",
	1: "Login",
	2: "Match",
}
var REQUEST_TYPE_value = map[string]int32{
	"No_Request": 0,
	"Login":      1,
	"Match":      2,
}

func (x REQUEST_TYPE) String() string {
	return proto.EnumName(REQUEST_TYPE_name, int32(x))
}
func (REQUEST_TYPE) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type REPLY_TYPE int32

const (
	REPLY_TYPE_No_Result    REPLY_TYPE = 0
	REPLY_TYPE_Login_Result REPLY_TYPE = 1
	REPLY_TYPE_Match_Result REPLY_TYPE = 2
)

var REPLY_TYPE_name = map[int32]string{
	0: "No_Result",
	1: "Login_Result",
	2: "Match_Result",
}
var REPLY_TYPE_value = map[string]int32{
	"No_Result":    0,
	"Login_Result": 1,
	"Match_Result": 2,
}

func (x REPLY_TYPE) String() string {
	return proto.EnumName(REPLY_TYPE_name, int32(x))
}
func (REPLY_TYPE) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

// 花色
type Suits int32

const (
	Suits_Club      Suits = 0
	Suits_Diamond   Suits = 1
	Suits_Heart     Suits = 2
	Suits_Spade     Suits = 3
	Suits_NoneSuits Suits = 4
)

var Suits_name = map[int32]string{
	0: "Club",
	1: "Diamond",
	2: "Heart",
	3: "Spade",
	4: "NoneSuits",
}
var Suits_value = map[string]int32{
	"Club":      0,
	"Diamond":   1,
	"Heart":     2,
	"Spade":     3,
	"NoneSuits": 4,
}

func (x Suits) String() string {
	return proto.EnumName(Suits_name, int32(x))
}
func (Suits) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

// / 卡牌权值
type Weight int32

const (
	Weight_Three  Weight = 0
	Weight_Four   Weight = 1
	Weight_Five   Weight = 2
	Weight_Six    Weight = 3
	Weight_Seven  Weight = 4
	Weight_Eight  Weight = 5
	Weight_Nine   Weight = 6
	Weight_Ten    Weight = 7
	Weight_Jack   Weight = 8
	Weight_Queen  Weight = 9
	Weight_King   Weight = 10
	Weight_One    Weight = 11
	Weight_Two    Weight = 12
	Weight_SJoker Weight = 13
	Weight_LJoker Weight = 14
)

var Weight_name = map[int32]string{
	0:  "Three",
	1:  "Four",
	2:  "Five",
	3:  "Six",
	4:  "Seven",
	5:  "Eight",
	6:  "Nine",
	7:  "Ten",
	8:  "Jack",
	9:  "Queen",
	10: "King",
	11: "One",
	12: "Two",
	13: "SJoker",
	14: "LJoker",
}
var Weight_value = map[string]int32{
	"Three":  0,
	"Four":   1,
	"Five":   2,
	"Six":    3,
	"Seven":  4,
	"Eight":  5,
	"Nine":   6,
	"Ten":    7,
	"Jack":   8,
	"Queen":  9,
	"King":   10,
	"One":    11,
	"Two":    12,
	"SJoker": 13,
	"LJoker": 14,
}

func (x Weight) String() string {
	return proto.EnumName(Weight_name, int32(x))
}
func (Weight) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

// / 身份
type Identity int32

const (
	Identity_Farmer   Identity = 0
	Identity_Landlord Identity = 1
)

var Identity_name = map[int32]string{
	0: "Farmer",
	1: "Landlord",
}
var Identity_value = map[string]int32{
	"Farmer":   0,
	"Landlord": 1,
}

func (x Identity) String() string {
	return proto.EnumName(Identity_name, int32(x))
}
func (Identity) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

// / 出牌类型
type CardsType int32

const (
	// 未知类型
	CardsType_UnknowCard CardsType = 0
	// 王炸
	CardsType_JokerBoom CardsType = 1
	// 炸弹
	CardsType_Boom CardsType = 2
	// 三个不带
	CardsType_OnlyThree CardsType = 3
	// 三个带一
	CardsType_ThreeAndOne CardsType = 4
	// 三个带二
	CardsType_ThreeAndTwo CardsType = 5
	// 顺子 五张或更多的连续单牌
	CardsType_Straight CardsType = 6
	// 双顺 三对或更多的连续对牌
	CardsType_DoubleStraight CardsType = 7
	// 三顺 二个或更多的连续三张牌
	CardsType_TripleStraight CardsType = 8
	// 对子
	CardsType_Double CardsType = 9
	// 单个
	CardsType_Single CardsType = 10
)

var CardsType_name = map[int32]string{
	0:  "UnknowCard",
	1:  "JokerBoom",
	2:  "Boom",
	3:  "OnlyThree",
	4:  "ThreeAndOne",
	5:  "ThreeAndTwo",
	6:  "Straight",
	7:  "DoubleStraight",
	8:  "TripleStraight",
	9:  "Double",
	10: "Single",
}
var CardsType_value = map[string]int32{
	"UnknowCard":     0,
	"JokerBoom":      1,
	"Boom":           2,
	"OnlyThree":      3,
	"ThreeAndOne":    4,
	"ThreeAndTwo":    5,
	"Straight":       6,
	"DoubleStraight": 7,
	"TripleStraight": 8,
	"Double":         9,
	"Single":         10,
}

func (x CardsType) String() string {
	return proto.EnumName(CardsType_name, int32(x))
}
func (CardsType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

// 角色类型
type PlayerRole int32

const (
	PlayerRole_Library     PlayerRole = 0
	PlayerRole_PlayerOne   PlayerRole = 1
	PlayerRole_PlayerTwo   PlayerRole = 2
	PlayerRole_PlayerThree PlayerRole = 3
	PlayerRole_PlayerFour  PlayerRole = 4
	PlayerRole_PlayerFive  PlayerRole = 5
	PlayerRole_PlayerSix   PlayerRole = 6
)

var PlayerRole_name = map[int32]string{
	0: "Library",
	1: "PlayerOne",
	2: "PlayerTwo",
	3: "PlayerThree",
	4: "PlayerFour",
	5: "PlayerFive",
	6: "PlayerSix",
}
var PlayerRole_value = map[string]int32{
	"Library":     0,
	"PlayerOne":   1,
	"PlayerTwo":   2,
	"PlayerThree": 3,
	"PlayerFour":  4,
	"PlayerFive":  5,
	"PlayerSix":   6,
}

func (x PlayerRole) String() string {
	return proto.EnumName(PlayerRole_name, int32(x))
}
func (PlayerRole) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type LOGIN_RESULT int32

const (
	LOGIN_RESULT_SUCCESS        LOGIN_RESULT = 0
	LOGIN_RESULT_WRONG_PASSWORD LOGIN_RESULT = 1
	LOGIN_RESULT_NO_USER        LOGIN_RESULT = 2
	LOGIN_RESULT_UNKNOW_ERROR   LOGIN_RESULT = 3
)

var LOGIN_RESULT_name = map[int32]string{
	0: "SUCCESS",
	1: "WRONG_PASSWORD",
	2: "NO_USER",
	3: "UNKNOW_ERROR",
}
var LOGIN_RESULT_value = map[string]int32{
	"SUCCESS":        0,
	"WRONG_PASSWORD": 1,
	"NO_USER":        2,
	"UNKNOW_ERROR":   3,
}

func (x LOGIN_RESULT) String() string {
	return proto.EnumName(LOGIN_RESULT_name, int32(x))
}
func (LOGIN_RESULT) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

type ProtoMessage struct {
	MessageType int32  `protobuf:"varint,1,opt,name=MessageType" json:"MessageType,omitempty"`
	Data        []byte `protobuf:"bytes,2,opt,name=Data,proto3" json:"Data,omitempty"`
}

func (m *ProtoMessage) Reset()                    { *m = ProtoMessage{} }
func (m *ProtoMessage) String() string            { return proto.CompactTextString(m) }
func (*ProtoMessage) ProtoMessage()               {}
func (*ProtoMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ProtoMessage) GetMessageType() int32 {
	if m != nil {
		return m.MessageType
	}
	return 0
}

func (m *ProtoMessage) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type LoginRequest struct {
	Username string `protobuf:"bytes,1,opt,name=Username" json:"Username,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=Password" json:"Password,omitempty"`
}

func (m *LoginRequest) Reset()                    { *m = LoginRequest{} }
func (m *LoginRequest) String() string            { return proto.CompactTextString(m) }
func (*LoginRequest) ProtoMessage()               {}
func (*LoginRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *LoginRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *LoginRequest) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type LoginReply struct {
	StateCode LOGIN_RESULT `protobuf:"varint,1,opt,name=StateCode,enum=LOGIN_RESULT" json:"StateCode,omitempty"`
	UserInfo  *UserInfo    `protobuf:"bytes,2,opt,name=UserInfo" json:"UserInfo,omitempty"`
}

func (m *LoginReply) Reset()                    { *m = LoginReply{} }
func (m *LoginReply) String() string            { return proto.CompactTextString(m) }
func (*LoginReply) ProtoMessage()               {}
func (*LoginReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *LoginReply) GetStateCode() LOGIN_RESULT {
	if m != nil {
		return m.StateCode
	}
	return LOGIN_RESULT_SUCCESS
}

func (m *LoginReply) GetUserInfo() *UserInfo {
	if m != nil {
		return m.UserInfo
	}
	return nil
}

type MatchRequest struct {
	Roomid int32 `protobuf:"varint,2,opt,name=Roomid" json:"Roomid,omitempty"`
}

func (m *MatchRequest) Reset()                    { *m = MatchRequest{} }
func (m *MatchRequest) String() string            { return proto.CompactTextString(m) }
func (*MatchRequest) ProtoMessage()               {}
func (*MatchRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *MatchRequest) GetRoomid() int32 {
	if m != nil {
		return m.Roomid
	}
	return 0
}

type CardInfo struct {
	CardIndex int32  `protobuf:"varint,1,opt,name=CardIndex" json:"CardIndex,omitempty"`
	Weight    Weight `protobuf:"varint,2,opt,name=Weight,enum=Weight" json:"Weight,omitempty"`
	Color     Suits  `protobuf:"varint,3,opt,name=color,enum=Suits" json:"color,omitempty"`
}

func (m *CardInfo) Reset()                    { *m = CardInfo{} }
func (m *CardInfo) String() string            { return proto.CompactTextString(m) }
func (*CardInfo) ProtoMessage()               {}
func (*CardInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *CardInfo) GetCardIndex() int32 {
	if m != nil {
		return m.CardIndex
	}
	return 0
}

func (m *CardInfo) GetWeight() Weight {
	if m != nil {
		return m.Weight
	}
	return Weight_Three
}

func (m *CardInfo) GetColor() Suits {
	if m != nil {
		return m.Color
	}
	return Suits_Club
}

type PlayCardInfo struct {
	CardsInfo []*CardInfo `protobuf:"bytes,1,rep,name=CardsInfo" json:"CardsInfo,omitempty"`
}

func (m *PlayCardInfo) Reset()                    { *m = PlayCardInfo{} }
func (m *PlayCardInfo) String() string            { return proto.CompactTextString(m) }
func (*PlayCardInfo) ProtoMessage()               {}
func (*PlayCardInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *PlayCardInfo) GetCardsInfo() []*CardInfo {
	if m != nil {
		return m.CardsInfo
	}
	return nil
}

type MatchReply struct {
	Roomid      int32            `protobuf:"varint,1,opt,name=Roomid" json:"Roomid,omitempty"`
	MatchedUser []*UserBriefInfo `protobuf:"bytes,2,rep,name=MatchedUser" json:"MatchedUser,omitempty"`
}

func (m *MatchReply) Reset()                    { *m = MatchReply{} }
func (m *MatchReply) String() string            { return proto.CompactTextString(m) }
func (*MatchReply) ProtoMessage()               {}
func (*MatchReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *MatchReply) GetRoomid() int32 {
	if m != nil {
		return m.Roomid
	}
	return 0
}

func (m *MatchReply) GetMatchedUser() []*UserBriefInfo {
	if m != nil {
		return m.MatchedUser
	}
	return nil
}

type UserBriefInfo struct {
	Userid   int64  `protobuf:"varint,1,opt,name=Userid" json:"Userid,omitempty"`
	UserName string `protobuf:"bytes,2,opt,name=UserName" json:"UserName,omitempty"`
	UserIcon int32  `protobuf:"varint,3,opt,name=UserIcon" json:"UserIcon,omitempty"`
	Rank     int32  `protobuf:"varint,4,opt,name=Rank" json:"Rank,omitempty"`
}

func (m *UserBriefInfo) Reset()                    { *m = UserBriefInfo{} }
func (m *UserBriefInfo) String() string            { return proto.CompactTextString(m) }
func (*UserBriefInfo) ProtoMessage()               {}
func (*UserBriefInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *UserBriefInfo) GetUserid() int64 {
	if m != nil {
		return m.Userid
	}
	return 0
}

func (m *UserBriefInfo) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

func (m *UserBriefInfo) GetUserIcon() int32 {
	if m != nil {
		return m.UserIcon
	}
	return 0
}

func (m *UserBriefInfo) GetRank() int32 {
	if m != nil {
		return m.Rank
	}
	return 0
}

type UserInfo struct {
	BasicInfo *UserBriefInfo `protobuf:"bytes,1,opt,name=BasicInfo" json:"BasicInfo,omitempty"`
	Shit      string         `protobuf:"bytes,2,opt,name=Shit" json:"Shit,omitempty"`
}

func (m *UserInfo) Reset()                    { *m = UserInfo{} }
func (m *UserInfo) String() string            { return proto.CompactTextString(m) }
func (*UserInfo) ProtoMessage()               {}
func (*UserInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *UserInfo) GetBasicInfo() *UserBriefInfo {
	if m != nil {
		return m.BasicInfo
	}
	return nil
}

func (m *UserInfo) GetShit() string {
	if m != nil {
		return m.Shit
	}
	return ""
}

func init() {
	proto.RegisterType((*ProtoMessage)(nil), "ProtoMessage")
	proto.RegisterType((*LoginRequest)(nil), "LoginRequest")
	proto.RegisterType((*LoginReply)(nil), "LoginReply")
	proto.RegisterType((*MatchRequest)(nil), "MatchRequest")
	proto.RegisterType((*CardInfo)(nil), "CardInfo")
	proto.RegisterType((*PlayCardInfo)(nil), "PlayCardInfo")
	proto.RegisterType((*MatchReply)(nil), "MatchReply")
	proto.RegisterType((*UserBriefInfo)(nil), "UserBriefInfo")
	proto.RegisterType((*UserInfo)(nil), "UserInfo")
	proto.RegisterEnum("REQUEST_TYPE", REQUEST_TYPE_name, REQUEST_TYPE_value)
	proto.RegisterEnum("REPLY_TYPE", REPLY_TYPE_name, REPLY_TYPE_value)
	proto.RegisterEnum("Suits", Suits_name, Suits_value)
	proto.RegisterEnum("Weight", Weight_name, Weight_value)
	proto.RegisterEnum("Identity", Identity_name, Identity_value)
	proto.RegisterEnum("CardsType", CardsType_name, CardsType_value)
	proto.RegisterEnum("PlayerRole", PlayerRole_name, PlayerRole_value)
	proto.RegisterEnum("LOGIN_RESULT", LOGIN_RESULT_name, LOGIN_RESULT_value)
}

func init() { proto.RegisterFile("message.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 831 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x54, 0xdf, 0x8f, 0xe2, 0x36,
	0x10, 0x26, 0x81, 0x00, 0x19, 0x02, 0xb5, 0xfc, 0x50, 0xa1, 0xea, 0xa4, 0xae, 0xa2, 0xfe, 0x38,
	0xd1, 0x0a, 0x55, 0xdb, 0x4a, 0x7d, 0xac, 0x6e, 0x21, 0x7b, 0xdd, 0x3b, 0x2e, 0x70, 0x0e, 0x74,
	0x75, 0x4f, 0xd4, 0x4b, 0x7c, 0x6c, 0xb4, 0xc1, 0xa6, 0x4e, 0xb8, 0x3d, 0xfe, 0x9d, 0xfe, 0x0b,
	0xfd, 0x07, 0xab, 0xb1, 0x03, 0xa1, 0x52, 0xdf, 0xbe, 0xf9, 0x66, 0xe6, 0xf3, 0x7c, 0x1e, 0x27,
	0xd0, 0xdf, 0x89, 0xa2, 0xe0, 0x5b, 0x31, 0xde, 0x6b, 0x55, 0xaa, 0x70, 0x0a, 0xc1, 0x02, 0xc1,
	0x3b, 0xcb, 0xd2, 0x2b, 0xe8, 0x55, 0x70, 0x79, 0xdc, 0x8b, 0xa1, 0x73, 0xe5, 0xbc, 0xf4, 0xd8,
	0x25, 0x45, 0x29, 0xb4, 0xa6, 0xbc, 0xe4, 0x43, 0xf7, 0xca, 0x79, 0x19, 0x30, 0x83, 0xc3, 0x5b,
	0x08, 0x66, 0x6a, 0x9b, 0x49, 0x26, 0xfe, 0x3a, 0x88, 0xa2, 0xa4, 0x5f, 0x41, 0x77, 0x55, 0x08,
	0x2d, 0xf9, 0xce, 0x4a, 0xf8, 0xec, 0x1c, 0x63, 0x6e, 0xc1, 0x8b, 0xe2, 0x59, 0xe9, 0xd4, 0x68,
	0xf8, 0xec, 0x1c, 0x87, 0x7f, 0x02, 0x54, 0x3a, 0xfb, 0xfc, 0x48, 0x7f, 0x00, 0x3f, 0x29, 0x79,
	0x29, 0x26, 0x2a, 0xb5, 0x32, 0x83, 0xeb, 0xfe, 0x78, 0x36, 0x7f, 0x7d, 0x17, 0xaf, 0x59, 0x94,
	0xac, 0x66, 0x4b, 0x56, 0xe7, 0xe9, 0xb7, 0xf6, 0xc8, 0x3b, 0xf9, 0x51, 0x19, 0xd9, 0xde, 0xb5,
	0x3f, 0x3e, 0x11, 0xec, 0x9c, 0x0a, 0xbf, 0x83, 0xe0, 0x1d, 0x2f, 0x37, 0x8f, 0xa7, 0x49, 0xbf,
	0x84, 0x36, 0x53, 0x6a, 0x97, 0xd9, 0x59, 0x3c, 0x56, 0x45, 0xe1, 0x16, 0xba, 0x13, 0xae, 0x53,
	0xec, 0xa1, 0x2f, 0xc0, 0xb7, 0x38, 0x15, 0x9f, 0xab, 0x1b, 0xa9, 0x09, 0xfa, 0x35, 0xb4, 0xef,
	0x45, 0xb6, 0x7d, 0x2c, 0x8d, 0xc2, 0xe0, 0xba, 0x33, 0xb6, 0x21, 0xab, 0x68, 0xfa, 0x02, 0xbc,
	0x8d, 0xca, 0x95, 0x1e, 0x36, 0x4d, 0xbe, 0x3d, 0x4e, 0x0e, 0x59, 0x59, 0x30, 0x4b, 0x86, 0xbf,
	0x42, 0xb0, 0xc8, 0xf9, 0xf1, 0x7c, 0xd8, 0xf7, 0xf6, 0xb0, 0xc2, 0x18, 0x71, 0xae, 0x9a, 0xc6,
	0xc8, 0x29, 0xcb, 0xea, 0x5c, 0xf8, 0x07, 0x40, 0xe5, 0x04, 0xef, 0xaa, 0xf6, 0xe1, 0x5c, 0xfa,
	0xa0, 0x3f, 0x41, 0xcf, 0x54, 0x89, 0x14, 0xaf, 0x60, 0xe8, 0x1a, 0xc1, 0x81, 0xb9, 0x99, 0x1b,
	0x9d, 0x89, 0x8f, 0x46, 0xf5, 0xb2, 0x24, 0x2c, 0xa0, 0xff, 0x9f, 0x2c, 0x4a, 0x23, 0x51, 0x49,
	0x37, 0x59, 0x15, 0x9d, 0x96, 0x1c, 0xe3, 0x92, 0xdd, 0x7a, 0xc9, 0x71, 0xb5, 0x64, 0x73, 0xe5,
	0x1b, 0x25, 0x8d, 0x6d, 0x8f, 0x9d, 0x63, 0x7c, 0x40, 0x8c, 0xcb, 0xa7, 0x61, 0xcb, 0xf0, 0x06,
	0x87, 0xb3, 0x7a, 0x7b, 0xf4, 0x47, 0xf0, 0x6f, 0x78, 0x91, 0x6d, 0xaa, 0x1b, 0x70, 0xfe, 0x67,
	0xe0, 0xba, 0x00, 0xd5, 0x92, 0xc7, 0xac, 0xac, 0x26, 0x30, 0x78, 0xf4, 0x0b, 0x04, 0x2c, 0x7a,
	0xbf, 0x8a, 0x92, 0xe5, 0x7a, 0xf9, 0x61, 0x11, 0xd1, 0x01, 0x40, 0xac, 0xd6, 0xd5, 0xca, 0x49,
	0x83, 0xfa, 0xe0, 0x99, 0x67, 0x46, 0x1c, 0x84, 0xc6, 0x3c, 0x71, 0x47, 0xbf, 0x01, 0xb0, 0x68,
	0x31, 0xfb, 0x60, 0x7b, 0xfa, 0xe0, 0x9b, 0x9e, 0xe2, 0x90, 0x63, 0x0b, 0xa9, 0x5e, 0xf8, 0x89,
	0x71, 0x90, 0x31, 0x9d, 0x27, 0xc6, 0x1d, 0x4d, 0xc0, 0x33, 0xab, 0xa5, 0x5d, 0x68, 0x4d, 0xf2,
	0xc3, 0x03, 0x69, 0xd0, 0x1e, 0x74, 0xa6, 0x19, 0xdf, 0x29, 0x99, 0xda, 0xb3, 0x7e, 0x17, 0x5c,
	0x97, 0xc4, 0x45, 0x98, 0xec, 0x79, 0x2a, 0x48, 0xd3, 0x1e, 0x24, 0x85, 0xe9, 0x24, 0xad, 0xd1,
	0xdf, 0xce, 0xe9, 0x3d, 0x61, 0xd1, 0xf2, 0x51, 0x0b, 0x41, 0x1a, 0xa8, 0x78, 0xab, 0x0e, 0x9a,
	0x38, 0x06, 0x65, 0x9f, 0x04, 0x71, 0x69, 0x07, 0x9a, 0x49, 0xf6, 0x99, 0x34, 0x8d, 0x98, 0xf8,
	0x24, 0x24, 0x69, 0x21, 0x8c, 0xb0, 0x97, 0x78, 0x58, 0x18, 0x67, 0x52, 0x90, 0x36, 0x16, 0x2e,
	0x85, 0x24, 0x1d, 0xa4, 0xde, 0xf0, 0xcd, 0x13, 0xe9, 0x62, 0xdd, 0xfb, 0x83, 0x10, 0x92, 0xf8,
	0x48, 0xbe, 0xcd, 0xe4, 0x96, 0x00, 0xd6, 0xcd, 0xa5, 0x20, 0x3d, 0xd3, 0xf0, 0xac, 0x48, 0x40,
	0x01, 0xda, 0xc9, 0x1b, 0xf5, 0x24, 0x34, 0xe9, 0x23, 0x9e, 0x59, 0x3c, 0x18, 0x7d, 0x03, 0xdd,
	0xbb, 0x54, 0xc8, 0x32, 0x2b, 0x8f, 0xc8, 0xdf, 0x72, 0xbd, 0x13, 0x9a, 0x34, 0x68, 0x00, 0xdd,
	0x19, 0x97, 0x69, 0xae, 0x74, 0x4a, 0x9c, 0xd1, 0x3f, 0x4e, 0xf5, 0x96, 0xcd, 0x7f, 0x63, 0x00,
	0xb0, 0x92, 0x4f, 0x52, 0x3d, 0x23, 0x45, 0x1a, 0xe8, 0xdb, 0xc8, 0xdd, 0x28, 0xb5, 0xb3, 0xbe,
	0x0c, 0x72, 0x31, 0x31, 0x97, 0xf9, 0xd1, 0x5a, 0x6f, 0xd2, 0x2f, 0xa0, 0x67, 0xe0, 0x2b, 0x99,
	0xe2, 0x74, 0xad, 0x4b, 0x02, 0xa7, 0xf4, 0xf0, 0xd4, 0xa4, 0xd4, 0xdc, 0xf8, 0x6e, 0x53, 0x0a,
	0x83, 0xa9, 0x3a, 0x3c, 0xe4, 0xe2, 0xcc, 0x75, 0x90, 0x5b, 0xea, 0x6c, 0x7f, 0xc1, 0x75, 0x71,
	0x6e, 0x5b, 0x47, 0x7c, 0xe3, 0x33, 0x93, 0xdb, 0x5c, 0x10, 0x18, 0x3d, 0x03, 0xe0, 0x07, 0x29,
	0x34, 0x53, 0xb9, 0xc0, 0x05, 0xce, 0xb2, 0x07, 0xcd, 0xf5, 0xd1, 0x8e, 0x6c, 0x53, 0x38, 0x88,
	0x53, 0x87, 0x38, 0x86, 0x8b, 0x73, 0x55, 0x61, 0x35, 0xf9, 0xe0, 0xa4, 0x64, 0x56, 0xd7, 0xba,
	0x88, 0x71, 0x81, 0x5e, 0xdd, 0x8f, 0x6b, 0x6c, 0x8f, 0x62, 0x08, 0x2e, 0x7f, 0x6e, 0x78, 0x74,
	0xb2, 0x9a, 0x4c, 0xa2, 0x24, 0x21, 0x0d, 0x74, 0x70, 0xcf, 0xe6, 0xf1, 0xeb, 0xf5, 0xe2, 0x55,
	0x92, 0xdc, 0xcf, 0xd9, 0x94, 0x38, 0x58, 0x10, 0xcf, 0xd7, 0xab, 0x24, 0x62, 0xc4, 0xc5, 0xe7,
	0xb8, 0x8a, 0xdf, 0xc6, 0xf3, 0xfb, 0x75, 0xc4, 0xd8, 0x9c, 0x91, 0xe6, 0x43, 0xdb, 0xfc, 0xe1,
	0x7f, 0xfe, 0x37, 0x00, 0x00, 0xff, 0xff, 0x17, 0xa7, 0xe7, 0xdd, 0xf2, 0x05, 0x00, 0x00,
}
